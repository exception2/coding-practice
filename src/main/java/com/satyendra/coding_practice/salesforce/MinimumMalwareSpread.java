package com.satyendra.coding_practice.salesforce;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MinimumMalwareSpread {
    public static void main(String[] args) {
        MinimumMalwareSpread minimumMalwareSpread = new MinimumMalwareSpread();
        int[][] graph = new int[][]{{1,1,0},{1,1,0},{0,0,1}};
        int[] initial = new int[]{0, 1};
        System.out.println(minimumMalwareSpread.minMalwareSpread(graph, initial));
        int[][] graph1 = new int[][]{{1,1,1},{1,1,1},{1,1,1}};
        int[] initial1 = new int[]{1, 2};
        System.out.println(minimumMalwareSpread.minMalwareSpread(graph1, initial1));
        // [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]]
        int[][] graph2 = new int[][]{{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}};
        int[] initial2 = new int[]{3, 1};
        System.out.println(minimumMalwareSpread.minMalwareSpread(graph2, initial2));

        int[][] graph3 = new int[][]{{1,1,0},{1,1,0},{0,0,1}};
        int[] initial3 = new int[]{0, 1, 2};
        System.out.println(minimumMalwareSpread.minMalwareSpread(graph3, initial3));
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind unionFind = new UnionFind(n);
        unionFind.makeAll();
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(i != j && graph[i][j] == 1) {
                    unionFind.doUnion(i, j);
                }
            }
        }
        int[] parent = unionFind.getParent();
        int[] size = unionFind.getSize();

        int[] idToMalwareCount = new int[n];
        for (int i : initial) {
            idToMalwareCount[unionFind.find(i)]++;
        }

        Arrays.sort(initial);

        int maxSize = 0, malwareInMaxSize = initial[0];
        for (int i : initial) {
            int rootI = unionFind.find(i);
            int malwareCount = idToMalwareCount[rootI];
            if (malwareCount == 1) {
                int sz = size[rootI];
                if (sz > maxSize) {
                    maxSize = sz;
                    //malwareInMaxSize = Math.min(malwareInMaxSize, i);
                    malwareInMaxSize = i;
                } else if (sz == maxSize && malwareInMaxSize > i){
                    malwareInMaxSize = i;
                }
            }
        }
        return malwareInMaxSize;
    }
}
class UnionFind {
    int n;
    int[] parent;
    int[] sizeArray;

    public UnionFind(int n) {
        this.n = n;
        parent = new int[n];
        sizeArray = new int[n];
    }

    int findSize(int x) {
        return sizeArray[x];
    }

    int[] getParent() {
        return parent;
    }
    int[] getSize() {
        return sizeArray;
    }

    void makeAll() {
        for (int i = 0 ; i < n ; i++) {
            parent[i] = i;
            sizeArray[i] = 1;
        }
    }

    int find(int x) {
        if(parent[x] == x) {
            return x;
        }
        return parent[x] = find(parent[x]);
    }

    void doUnion(int x, int y) {
        x = find(x);
        y = find(y);

        if(sizeArray[x] > sizeArray[y]) {
            int t = x;
            x = y;
            y = t;
        }
        parent[x] = y;
        sizeArray[y] += sizeArray[x];
    }



}
